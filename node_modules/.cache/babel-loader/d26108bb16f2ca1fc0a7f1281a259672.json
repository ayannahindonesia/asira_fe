{"ast":null,"code":"import toDate from '../toDate/index.js';\nimport startOfISOWeek from '../startOfISOWeek/index.js';\nimport startOfISOWeekYear from '../startOfISOWeekYear/index.js';\nvar MILLISECONDS_IN_WEEK = 604800000;\n/**\r\n * @name getISOWeek\r\n * @category ISO Week Helpers\r\n * @summary Get the ISO week of the given date.\r\n *\r\n * @description\r\n * Get the ISO week of the given date.\r\n *\r\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\r\n *\r\n * ### v2.0.0 breaking changes:\r\n *\r\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\r\n *\r\n * @param {Date|Number} date - the given date\r\n * @returns {Number} the ISO week\r\n * @throws {TypeError} 1 argument required\r\n *\r\n * @example\r\n * // Which week of the ISO-week numbering year is 2 January 2005?\r\n * var result = getISOWeek(new Date(2005, 0, 2))\r\n * //=> 53\r\n */\n\nexport default function getISOWeek(dirtyDate) {\n  if (arguments.length < 1) {\n    throw new TypeError('1 argument required, but only ' + arguments.length + ' present');\n  }\n\n  var date = toDate(dirtyDate);\n  var diff = startOfISOWeek(date).getTime() - startOfISOWeekYear(date).getTime(); // Round the number of days to the nearest integer\n  // because the number of milliseconds in a week is not constant\n  // (e.g. it's different in the week of the daylight saving time clock shift)\n\n  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;\n}","map":{"version":3,"sources":["C:/Users/pc/Desktop/asira_fe/node_modules/date-fns/esm/getISOWeek/index.js"],"names":["toDate","startOfISOWeek","startOfISOWeekYear","MILLISECONDS_IN_WEEK","getISOWeek","dirtyDate","arguments","length","TypeError","date","diff","getTime","Math","round"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,oBAAnB;AACA,OAAOC,cAAP,MAA2B,4BAA3B;AACA,OAAOC,kBAAP,MAA+B,gCAA/B;AACA,IAAIC,oBAAoB,GAAG,SAA3B;AACA;;;;;;;;;;;;;;;;;;;;;;;;AAwBA,eAAe,SAASC,UAAT,CAAoBC,SAApB,EAA+B;AAC5C,MAAIC,SAAS,CAACC,MAAV,GAAmB,CAAvB,EAA0B;AACxB,UAAM,IAAIC,SAAJ,CAAc,mCAAmCF,SAAS,CAACC,MAA7C,GAAsD,UAApE,CAAN;AACD;;AAED,MAAIE,IAAI,GAAGT,MAAM,CAACK,SAAD,CAAjB;AACA,MAAIK,IAAI,GAAGT,cAAc,CAACQ,IAAD,CAAd,CAAqBE,OAArB,KAAiCT,kBAAkB,CAACO,IAAD,CAAlB,CAAyBE,OAAzB,EAA5C,CAN4C,CAMoC;AAChF;AACA;;AAEA,SAAOC,IAAI,CAACC,KAAL,CAAWH,IAAI,GAAGP,oBAAlB,IAA0C,CAAjD;AACD","sourcesContent":["import toDate from '../toDate/index.js';\r\nimport startOfISOWeek from '../startOfISOWeek/index.js';\r\nimport startOfISOWeekYear from '../startOfISOWeekYear/index.js';\r\nvar MILLISECONDS_IN_WEEK = 604800000;\r\n/**\r\n * @name getISOWeek\r\n * @category ISO Week Helpers\r\n * @summary Get the ISO week of the given date.\r\n *\r\n * @description\r\n * Get the ISO week of the given date.\r\n *\r\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\r\n *\r\n * ### v2.0.0 breaking changes:\r\n *\r\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\r\n *\r\n * @param {Date|Number} date - the given date\r\n * @returns {Number} the ISO week\r\n * @throws {TypeError} 1 argument required\r\n *\r\n * @example\r\n * // Which week of the ISO-week numbering year is 2 January 2005?\r\n * var result = getISOWeek(new Date(2005, 0, 2))\r\n * //=> 53\r\n */\r\n\r\nexport default function getISOWeek(dirtyDate) {\r\n  if (arguments.length < 1) {\r\n    throw new TypeError('1 argument required, but only ' + arguments.length + ' present');\r\n  }\r\n\r\n  var date = toDate(dirtyDate);\r\n  var diff = startOfISOWeek(date).getTime() - startOfISOWeekYear(date).getTime(); // Round the number of days to the nearest integer\r\n  // because the number of milliseconds in a week is not constant\r\n  // (e.g. it's different in the week of the daylight saving time clock shift)\r\n\r\n  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;\r\n}"]},"metadata":{},"sourceType":"module"}