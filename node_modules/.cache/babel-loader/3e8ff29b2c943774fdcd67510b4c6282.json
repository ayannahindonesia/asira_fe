{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\pc\\\\Desktop\\\\fe_testing\\\\src\\\\components\\\\subComponent\\\\GridDetail.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/styles';\nimport Grid from '@material-ui/core/Grid';\nimport './../../support/css/gridDetail.css';\n\nconst styles = theme => ({\n  gridDetail: {\n    fontSize: 'calc(10px + 0.3vw)',\n    marginBottom: '5px',\n    wordWrap: 'break-word',\n    flexWrap: 'wrap'\n  }\n});\n\nclass GridDetails extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.renderDataColumn = (dataColumn, dataLabel) => {\n      let tester = '';\n      tester = dataColumn && dataColumn.map((dataRow, index) => {\n        return React.createElement(Grid, {\n          item: true,\n          sm: parseInt(12 / dataColumn.length),\n          xs: 12,\n          key: index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 38\n          },\n          __self: this\n        }, React.createElement(Grid, {\n          container: true,\n          style: {\n            marginBottom: '10px',\n            flexWrap: 'wrap'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 39\n          },\n          __self: this\n        }, this.renderDataRow(dataRow, dataLabel && dataLabel[index], index)));\n      }, this);\n      return tester;\n    };\n\n    this.lengthGridLabel = lengthLabel => {\n      let pjgLabel = 6;\n\n      if (lengthLabel) {\n        pjgLabel = lengthLabel;\n      }\n\n      return pjgLabel;\n    };\n\n    this.lengthGridValue = lengthLabel => {\n      let pjgValue = 6;\n\n      if (lengthLabel) {\n        pjgValue = 12 - lengthLabel;\n      }\n\n      return pjgValue;\n    };\n\n    this.findBold = data => {\n      let dataNew = data.toString();\n\n      if (dataNew.includes('<b>')) {\n        dataNew = dataNew.split('<b>');\n        return React.createElement(\"b\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 76\n          },\n          __self: this\n        }, \" \", dataNew[1], \" \");\n      }\n\n      return dataNew;\n    };\n\n    this.renderDataRow = (dataRow, dataPerLabel, indexColumn) => {\n      let tester = '';\n      tester = dataRow && dataRow.map((dataPerRow, index) => {\n        return React.createElement(Grid, {\n          item: true,\n          sm: 12,\n          xs: 12,\n          key: index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 87\n          },\n          __self: this\n        }, React.createElement(Grid, {\n          container: true,\n          style: {\n            marginBottom: '5px'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 89\n          },\n          __self: this\n        }, React.createElement(Grid, {\n          item: true,\n          sm: this.lengthGridLabel(this.props.gridLabel && this.props.gridLabel[indexColumn]),\n          xs: this.lengthGridLabel(this.props.gridLabel && this.props.gridLabel[indexColumn]),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 90\n          },\n          __self: this\n        }, React.createElement(\"b\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 91\n          },\n          __self: this\n        }, dataPerLabel && dataPerLabel[index])), React.createElement(Grid, {\n          item: true,\n          sm: this.lengthGridValue(this.props.gridLabel && this.props.gridLabel[indexColumn]),\n          xs: this.lengthGridValue(this.props.gridLabel && this.props.gridLabel[indexColumn]),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 94\n          },\n          __self: this\n        }, React.createElement(Grid, {\n          container: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 95\n          },\n          __self: this\n        }, React.createElement(Grid, {\n          item: true,\n          sm: 1,\n          xs: 1,\n          style: {\n            maxWidth: '15px'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 96\n          },\n          __self: this\n        }, !this.props.noEquals && React.createElement(\"b\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 98\n          },\n          __self: this\n        }, \" : \")), React.createElement(Grid, {\n          item: true,\n          sm: 11,\n          xs: 11,\n          style: {\n            color: dataPerRow && dataPerRow.color ? dataPerRow.color : dataPerRow\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 102\n          },\n          __self: this\n        }, dataPerRow && dataPerRow.color ? dataPerRow.value : dataPerRow ? this.findBold(dataPerRow) : '-')))));\n      }, this);\n      return tester;\n    };\n\n    this.state = {\n      errorText: ''\n    };\n  } // componentDidMount() {\n  //   if(this.props.data) {\n  //     this.refresh(this.props.data)\n  //   }\n  // }\n\n\n  render() {\n    const _this$props = this.props,\n          classes = _this$props.classes,\n          title = _this$props.title,\n          label = _this$props.label,\n          data = _this$props.data;\n    return React.createElement(Grid, {\n      container: true,\n      className: classes.gridDetail,\n      style: {\n        backgroundColor: this.props.background ? '#D8E6FF' : 'none',\n        padding: this.props.background ? '10px 0px 0px 10px' : '0px 0px 0px 10px',\n        fontWeight: this.props.background ? 'bold' : 'normal',\n        borderRadius: '5px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      sm: 12,\n      xs: 12,\n      style: {\n        color: \"#2076B8\",\n        marginBottom: !this.props.noTitleLine && title ? '10px' : '0px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, !this.props.noTitleLine && title && React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      style: {\n        backgroundColor: 'white'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, title && title)), !this.props.noTitleLine && !title && React.createElement(\"hr\", {\n      style: {\n        borderTop: '1px solid rgba(32,118,184,1)'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }), this.props.noTitleLine && title && React.createElement(\"div\", {\n      style: {\n        fontSize: '1rem'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }, title)), data && label && this.renderDataColumn(data, label));\n  }\n\n}\n\nGridDetails.propTypes = {\n  title: PropTypes.string,\n  label: PropTypes.array.isRequired,\n  data: PropTypes.array.isRequired\n};\nexport default withStyles(styles)(GridDetails);","map":{"version":3,"sources":["C:/Users/pc/Desktop/fe_testing/src/components/subComponent/GridDetail.js"],"names":["React","PropTypes","withStyles","Grid","styles","theme","gridDetail","fontSize","marginBottom","wordWrap","flexWrap","GridDetails","Component","constructor","props","renderDataColumn","dataColumn","dataLabel","tester","map","dataRow","index","parseInt","length","renderDataRow","lengthGridLabel","lengthLabel","pjgLabel","lengthGridValue","pjgValue","findBold","data","dataNew","toString","includes","split","dataPerLabel","indexColumn","dataPerRow","gridLabel","maxWidth","noEquals","color","value","state","errorText","render","classes","title","label","backgroundColor","background","padding","fontWeight","borderRadius","noTitleLine","borderTop","propTypes","string","array","isRequired"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport './../../support/css/gridDetail.css'\r\n\r\nconst styles = (theme) => ({\r\n\r\n  gridDetail: {\r\n    fontSize: 'calc(10px + 0.3vw)',\r\n    marginBottom: '5px',\r\n    wordWrap:'break-word',\r\n    flexWrap:'wrap',\r\n  },\r\n\r\n});\r\n\r\nclass GridDetails extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      errorText: '',\r\n    };\r\n  }\r\n\r\n  // componentDidMount() {\r\n  //   if(this.props.data) {\r\n  //     this.refresh(this.props.data)\r\n  //   }\r\n  // }\r\n\r\n  renderDataColumn = (dataColumn, dataLabel) => {\r\n    let tester = '';\r\n    \r\n    tester = dataColumn && dataColumn.map((dataRow, index) => {\r\n      return(\r\n        <Grid item sm={parseInt(12 / dataColumn.length)} xs={12} key={index}>\r\n          <Grid container style={{marginBottom:'10px', flexWrap:'wrap'}}> \r\n            {this.renderDataRow(dataRow, dataLabel && dataLabel[index], index)}\r\n          </Grid>\r\n        </Grid>\r\n      )\r\n    }, this)\r\n      \r\n    \r\n\r\n    return tester\r\n  }\r\n\r\n  lengthGridLabel = (lengthLabel) => {\r\n    let pjgLabel = 6;\r\n\r\n    if(lengthLabel) {\r\n      pjgLabel = lengthLabel\r\n    }\r\n\r\n    return pjgLabel\r\n  }\r\n\r\n  lengthGridValue = (lengthLabel) => {\r\n    let pjgValue = 6;\r\n\r\n    if(lengthLabel) {\r\n      pjgValue = 12 - lengthLabel\r\n    }\r\n\r\n    return pjgValue\r\n  }\r\n\r\n  findBold = (data) => {\r\n    let dataNew = data.toString();\r\n\r\n    if(dataNew.includes('<b>')) {\r\n      dataNew = dataNew.split('<b>')\r\n      return <b> {dataNew[1]} </b>;\r\n    }\r\n    \r\n    return dataNew;\r\n  }\r\n\r\n  renderDataRow = (dataRow, dataPerLabel, indexColumn) => {\r\n    let tester = '';\r\n\r\n    tester = dataRow && dataRow.map((dataPerRow, index) => {\r\n      return (\r\n        <Grid item sm={12} xs={12} key={index}>\r\n\r\n          <Grid container style={{marginBottom:'5px'}}> \r\n            <Grid item sm={this.lengthGridLabel(this.props.gridLabel && this.props.gridLabel[indexColumn])} xs={this.lengthGridLabel(this.props.gridLabel && this.props.gridLabel[indexColumn])}>\r\n              <b>{ dataPerLabel && dataPerLabel[index] }</b>\r\n            </Grid>\r\n\r\n            <Grid item sm={this.lengthGridValue(this.props.gridLabel && this.props.gridLabel[indexColumn])} xs={this.lengthGridValue(this.props.gridLabel && this.props.gridLabel[indexColumn])}>\r\n              <Grid container>\r\n                <Grid item sm={1} xs={1} style={{maxWidth:'15px'}}>\r\n                  {\r\n                    (!this.props.noEquals) && <b> : </b>\r\n                  }\r\n                </Grid>\r\n\r\n                <Grid item sm={11} xs={11} style={{color:dataPerRow&& dataPerRow.color? dataPerRow.color:dataPerRow}} >\r\n                  {\r\n                    dataPerRow && dataPerRow.color ?  dataPerRow.value : (dataPerRow ? this.findBold(dataPerRow) : '-')\r\n                  }\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n\r\n        </Grid>\r\n      )\r\n    }, this);\r\n      \r\n    return tester\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      classes,\r\n      title,\r\n      label,\r\n      data,\r\n    } = this.props;\r\n    \r\n    return ( \r\n      <Grid container \r\n        className={classes.gridDetail} \r\n        style={\r\n          {\r\n            backgroundColor: this.props.background ? '#D8E6FF' : 'none', \r\n            padding: this.props.background ? '10px 0px 0px 10px' : '0px 0px 0px 10px',\r\n            fontWeight: this.props.background ? 'bold' : 'normal',\r\n            borderRadius:'5px'\r\n          }\r\n        }\r\n      >\r\n\r\n        <Grid item sm={12} xs={12} style={{color:\"#2076B8\", marginBottom: !this.props.noTitleLine && title ?'10px' :'0px'}}>\r\n              { !this.props.noTitleLine && title &&\r\n                <h4>\r\n                \r\n                  <span style={{backgroundColor:'white'}}> \r\n                \r\n                    {title && title} \r\n\r\n                  </span>\r\n                \r\n\r\n                \r\n                \r\n                </h4>\r\n              }\r\n\r\n              {\r\n                !this.props.noTitleLine && !title &&\r\n                <hr style={{borderTop: '1px solid rgba(32,118,184,1)'}}/>\r\n              }\r\n\r\n              { this.props.noTitleLine && title &&\r\n                <div style={{fontSize:'1rem'}}>{ title }</div>\r\n              }\r\n            </Grid>\r\n        \r\n        {data && label && this.renderDataColumn(data, label)}\r\n\r\n      </Grid>\r\n    );\r\n  }\r\n}\r\n\r\nGridDetails.propTypes = {\r\n  title: PropTypes.string,\r\n  label: PropTypes.array.isRequired,\r\n  data: PropTypes.array.isRequired,\r\n};\r\n\r\nexport default withStyles(styles)(GridDetails);\r\n"]},"metadata":{},"sourceType":"module"}