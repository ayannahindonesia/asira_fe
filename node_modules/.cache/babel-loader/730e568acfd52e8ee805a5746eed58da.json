{"ast":null,"code":"export function padLeft(dataInt, pjg) {\n  let str = dataInt;\n\n  for (let w = 0; w < pjg - dataInt.toString().length; w++) {\n    str = \"0\" + str;\n  }\n\n  return str;\n}\nexport function copyArray(arrOld) {\n  let arrNew = [];\n\n  for (let i = 0; i < arrOld.length; i++) {\n    let item = arrOld[i];\n    let objItem = {};\n\n    for (let key in item) {\n      objItem[key] = item[key];\n    }\n\n    arrNew.push(objItem);\n  }\n\n  return arrNew;\n}\nexport function handleFormatDate(dateBefore, formatedType) {\n  let dateAfter = new Date(dateBefore);\n\n  if (formatedType.toLowerCase().includes('datetime')) {\n    dateAfter = dateAfter.toUTCString().substring(5, 25);\n  } else {\n    dateAfter = dateAfter.toUTCString().substring(5, 16);\n  }\n\n  return dateAfter;\n}\n;\nexport function deleteSeparator(number, separator) {\n  while (number.includes(separator)) {\n    number = number.replace(separator, \"\");\n  }\n\n  return number;\n}\nexport function isNumeric(value) {\n  return !isNaN(parseFloat(value)) && isFinite(value);\n}\nexport function formatNumber(number) {\n  number = number.toString().trim();\n  number = deleteSeparator(number, \",\");\n  let pjg = number.length;\n\n  if (!isNumeric(number)) {\n    pjg = pjg - 1;\n    number = number.substr(0, pjg);\n  }\n\n  let tmp = \"-\";\n\n  if (pjg > 3) {\n    while (pjg > 3) {\n      pjg -= 3;\n      tmp = number.substr(pjg, 3) + \".\" + tmp;\n    }\n\n    if (pjg <= 3) {\n      tmp = number.substr(0, pjg) + \".\" + tmp;\n    }\n\n    tmp = tmp.substr(0, tmp.length - 1);\n  } else {\n    tmp = number;\n  }\n\n  return tmp;\n}","map":{"version":3,"sources":["C:\\Users\\pc\\Desktop\\asira_fe\\src\\components\\global\\globalFunction.js"],"names":["padLeft","dataInt","pjg","str","w","toString","length","copyArray","arrOld","arrNew","i","item","objItem","key","push","handleFormatDate","dateBefore","formatedType","dateAfter","Date","toLowerCase","includes","toUTCString","substring","deleteSeparator","number","separator","replace","isNumeric","value","isNaN","parseFloat","isFinite","formatNumber","trim","substr","tmp"],"mappings":"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","sourcesContent":["export function padLeft(dataInt, pjg) {\n  let str = dataInt;\n  for (let w = 0; w < pjg - dataInt.toString().length; w++) {\n    str = \"0\" + str;\n  }\n  return str;\n}\n\nexport function copyArray(arrOld) {\n  let arrNew = []\n  for(let i=0;i<arrOld.length;i++){\n    let item = arrOld[i]\n    let objItem = {}\n    for (let key in item) {\n      objItem[key] = item[key]\n    }\n    arrNew.push(objItem)\n  }\n  return arrNew\n}\n\nexport function handleFormatDate (dateBefore, formatedType){\n  let dateAfter = new Date(dateBefore);\n  if (formatedType.toLowerCase().includes('datetime')) {\n    dateAfter = dateAfter.toUTCString().substring(5, 25);\n  } else {\n    dateAfter = dateAfter.toUTCString().substring(5, 16);\n  }\n  return dateAfter;\n};\n\nexport function deleteSeparator(number, separator) {\n  while(number.includes(separator)){\n    number = number.replace(separator,\"\")\n  }\n  return number\n}\n\nexport function isNumeric(value) {\n  return !isNaN(parseFloat(value)) && isFinite(value);\n}\n\nexport function formatNumber(number) {\n  number = number.toString().trim()\n  number = deleteSeparator(number,\",\")\n  let pjg = number.length\n  if(!isNumeric(number)){\n    pjg = pjg-1\n    number = number.substr(0,pjg)\n  }\n  let tmp = \"-\"\n  if(pjg>3){\n    while(pjg>3){\n      pjg -= 3\n      tmp = number.substr(pjg,3) + \".\" + tmp\n    }\n    if(pjg<=3){\n      tmp = number.substr(0,pjg) + \".\" + tmp\n    }\n    tmp = tmp.substr(0, tmp.length-1)\n  }else{\n    tmp = number\n  }\n  \n  return tmp\n}"]},"metadata":{},"sourceType":"module"}