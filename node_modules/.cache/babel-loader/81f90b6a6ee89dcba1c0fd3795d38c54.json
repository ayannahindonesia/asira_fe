{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getFontShorthand = getFontShorthand;\nexports.measureText = measureText;\nexports.updateInputWidth = updateInputWidth;\nexports[\"default\"] = void 0;\n/**\n * Gets font CSS shorthand property given element.\n *\n * @param {HTMLElement} element Element to get font CSS shorthand property from\n */\n\nfunction getFontShorthand(element) {\n  var style = window.getComputedStyle(element);\n\n  if (style.font) {\n    return style.font;\n  }\n\n  var isFontDefined = style['font-family'] !== '';\n\n  if (!isFontDefined) {\n    return '';\n  }\n\n  return \"\".concat(style['font-style'], \" \").concat(style['font-variant'], \" \").concat(style['font-weight'], \" \").concat(style['font-size'], \" / \").concat(style['line-height'], \" \").concat(style['font-family']);\n}\n/**\n * Measures text width given text and font CSS shorthand.\n *\n * @param {String} text Text to measure\n * @param {String} font Font to use when measuring the text\n */\n\n\nfunction measureText(text, font) {\n  var canvas = measureText.canvas || (measureText.canvas = document.createElement('canvas'));\n  var context = canvas.getContext('2d');\n  context.font = font;\n\n  var _context$measureText = context.measureText(text),\n      width = _context$measureText.width;\n\n  return Math.ceil(width);\n}\n/**\n * Updates input element width to fit its content given input element\n * @param {HTMLInputElement} element\n */\n\n\nfunction updateInputWidth(element) {\n  if (typeof window === 'undefined') {\n    return null;\n  }\n\n  var font = getFontShorthand(element);\n  var text = element.value || element.placeholder;\n  var width = measureText(text, font);\n  element.style.width = \"\".concat(width, \"px\");\n  return width;\n}\n\nvar _default = updateInputWidth;\nexports[\"default\"] = _default;","map":{"version":3,"sources":["C:/Users/pc/Desktop/asira_fe/node_modules/update-input-width/dist/index.js"],"names":["Object","defineProperty","exports","value","getFontShorthand","measureText","updateInputWidth","element","style","window","getComputedStyle","font","isFontDefined","concat","text","canvas","document","createElement","context","getContext","_context$measureText","width","Math","ceil","placeholder","_default"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,gBAAR,GAA2BA,gBAA3B;AACAF,OAAO,CAACG,WAAR,GAAsBA,WAAtB;AACAH,OAAO,CAACI,gBAAR,GAA2BA,gBAA3B;AACAJ,OAAO,CAAC,SAAD,CAAP,GAAqB,KAAK,CAA1B;AAEA;;;;;;AAKA,SAASE,gBAAT,CAA0BG,OAA1B,EAAmC;AACjC,MAAIC,KAAK,GAAGC,MAAM,CAACC,gBAAP,CAAwBH,OAAxB,CAAZ;;AAEA,MAAIC,KAAK,CAACG,IAAV,EAAgB;AACd,WAAOH,KAAK,CAACG,IAAb;AACD;;AAED,MAAIC,aAAa,GAAGJ,KAAK,CAAC,aAAD,CAAL,KAAyB,EAA7C;;AAEA,MAAI,CAACI,aAAL,EAAoB;AAClB,WAAO,EAAP;AACD;;AAED,SAAO,GAAGC,MAAH,CAAUL,KAAK,CAAC,YAAD,CAAf,EAA+B,GAA/B,EAAoCK,MAApC,CAA2CL,KAAK,CAAC,cAAD,CAAhD,EAAkE,GAAlE,EAAuEK,MAAvE,CAA8EL,KAAK,CAAC,aAAD,CAAnF,EAAoG,GAApG,EAAyGK,MAAzG,CAAgHL,KAAK,CAAC,WAAD,CAArH,EAAoI,KAApI,EAA2IK,MAA3I,CAAkJL,KAAK,CAAC,aAAD,CAAvJ,EAAwK,GAAxK,EAA6KK,MAA7K,CAAoLL,KAAK,CAAC,aAAD,CAAzL,CAAP;AACD;AACD;;;;;;;;AAQA,SAASH,WAAT,CAAqBS,IAArB,EAA2BH,IAA3B,EAAiC;AAC/B,MAAII,MAAM,GAAGV,WAAW,CAACU,MAAZ,KAAuBV,WAAW,CAACU,MAAZ,GAAqBC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAA5C,CAAb;AACA,MAAIC,OAAO,GAAGH,MAAM,CAACI,UAAP,CAAkB,IAAlB,CAAd;AACAD,EAAAA,OAAO,CAACP,IAAR,GAAeA,IAAf;;AAEA,MAAIS,oBAAoB,GAAGF,OAAO,CAACb,WAAR,CAAoBS,IAApB,CAA3B;AAAA,MACIO,KAAK,GAAGD,oBAAoB,CAACC,KADjC;;AAGA,SAAOC,IAAI,CAACC,IAAL,CAAUF,KAAV,CAAP;AACD;AACD;;;;;;AAMA,SAASf,gBAAT,CAA0BC,OAA1B,EAAmC;AACjC,MAAI,OAAOE,MAAP,KAAkB,WAAtB,EAAmC;AACjC,WAAO,IAAP;AACD;;AAED,MAAIE,IAAI,GAAGP,gBAAgB,CAACG,OAAD,CAA3B;AACA,MAAIO,IAAI,GAAGP,OAAO,CAACJ,KAAR,IAAiBI,OAAO,CAACiB,WAApC;AACA,MAAIH,KAAK,GAAGhB,WAAW,CAACS,IAAD,EAAOH,IAAP,CAAvB;AACAJ,EAAAA,OAAO,CAACC,KAAR,CAAca,KAAd,GAAsB,GAAGR,MAAH,CAAUQ,KAAV,EAAiB,IAAjB,CAAtB;AACA,SAAOA,KAAP;AACD;;AAED,IAAII,QAAQ,GAAGnB,gBAAf;AACAJ,OAAO,CAAC,SAAD,CAAP,GAAqBuB,QAArB","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getFontShorthand = getFontShorthand;\nexports.measureText = measureText;\nexports.updateInputWidth = updateInputWidth;\nexports[\"default\"] = void 0;\n\n/**\n * Gets font CSS shorthand property given element.\n *\n * @param {HTMLElement} element Element to get font CSS shorthand property from\n */\nfunction getFontShorthand(element) {\n  var style = window.getComputedStyle(element);\n\n  if (style.font) {\n    return style.font;\n  }\n\n  var isFontDefined = style['font-family'] !== '';\n\n  if (!isFontDefined) {\n    return '';\n  }\n\n  return \"\".concat(style['font-style'], \" \").concat(style['font-variant'], \" \").concat(style['font-weight'], \" \").concat(style['font-size'], \" / \").concat(style['line-height'], \" \").concat(style['font-family']);\n}\n/**\n * Measures text width given text and font CSS shorthand.\n *\n * @param {String} text Text to measure\n * @param {String} font Font to use when measuring the text\n */\n\n\nfunction measureText(text, font) {\n  var canvas = measureText.canvas || (measureText.canvas = document.createElement('canvas'));\n  var context = canvas.getContext('2d');\n  context.font = font;\n\n  var _context$measureText = context.measureText(text),\n      width = _context$measureText.width;\n\n  return Math.ceil(width);\n}\n/**\n * Updates input element width to fit its content given input element\n * @param {HTMLInputElement} element\n */\n\n\nfunction updateInputWidth(element) {\n  if (typeof window === 'undefined') {\n    return null;\n  }\n\n  var font = getFontShorthand(element);\n  var text = element.value || element.placeholder;\n  var width = measureText(text, font);\n  element.style.width = \"\".concat(width, \"px\");\n  return width;\n}\n\nvar _default = updateInputWidth;\nexports[\"default\"] = _default;"]},"metadata":{},"sourceType":"script"}