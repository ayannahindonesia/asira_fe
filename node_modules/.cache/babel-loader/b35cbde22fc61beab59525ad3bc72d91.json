{"ast":null,"code":"import toDate from '../toDate/index.js';\n/**\r\n * @name areIntervalsOverlapping\r\n * @category Interval Helpers\r\n * @summary Is the given time interval overlapping with another time interval?\r\n *\r\n * @description\r\n * Is the given time interval overlapping with another time interval? Adjacent intervals do not count as overlapping.\r\n *\r\n * ### v2.0.0 breaking changes:\r\n *\r\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\r\n *\r\n * - The function was renamed from `areRangesOverlapping` to `areIntervalsOverlapping`.\r\n *   This change was made to mirror the use of the word \"interval\" in standard ISO 8601:2004 terminology:\r\n *\r\n *   ```\r\n *   2.1.3\r\n *   time interval\r\n *   part of the time axis limited by two instants\r\n *   ```\r\n *\r\n *   Also, this function now accepts an object with `start` and `end` properties\r\n *   instead of two arguments as an interval.\r\n *   This function now throws `RangeError` if the start of the interval is after its end\r\n *   or if any date in the interval is `Invalid Date`.\r\n *\r\n *   ```javascript\r\n *   // Before v2.0.0\r\n *\r\n *   areRangesOverlapping(\r\n *     new Date(2014, 0, 10), new Date(2014, 0, 20),\r\n *     new Date(2014, 0, 17), new Date(2014, 0, 21)\r\n *   )\r\n *\r\n *   // v2.0.0 onward\r\n *\r\n *   areIntervalsOverlapping(\r\n *     { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\r\n *     { start: new Date(2014, 0, 17), end: new Date(2014, 0, 21) }\r\n *   )\r\n *   ```\r\n *\r\n * @param {Interval} intervalLeft - the first interval to compare. See [Interval]{@link docs/types/Interval}\r\n * @param {Interval} intervalRight - the second interval to compare. See [Interval]{@link docs/types/Interval}\r\n * @returns {Boolean} whether the time intervals are overlapping\r\n * @throws {TypeError} 2 arguments required\r\n * @throws {RangeError} The start of an interval cannot be after its end\r\n * @throws {RangeError} Date in interval cannot be `Invalid Date`\r\n *\r\n * @example\r\n * // For overlapping time intervals:\r\n * areIntervalsOverlapping(\r\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\r\n *   { start: new Date(2014, 0, 17), end: new Date(2014, 0, 21) }\r\n * )\r\n * //=> true\r\n *\r\n * @example\r\n * // For non-overlapping time intervals:\r\n * areIntervalsOverlapping(\r\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\r\n *   { start: new Date(2014, 0, 21), end: new Date(2014, 0, 22) }\r\n * )\r\n * //=> false\r\n *\r\n * @example\r\n * // For adjacent time intervals:\r\n * areIntervalsOverlapping(\r\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\r\n *   { start: new Date(2014, 0, 20), end: new Date(2014, 0, 30) }\r\n * )\r\n * //=> false\r\n */\n\nexport default function areIntervalsOverlapping(dirtyIntervalLeft, dirtyIntervalRight) {\n  if (arguments.length < 2) {\n    throw new TypeError('2 arguments required, but only ' + arguments.length + ' present');\n  }\n\n  var intervalLeft = dirtyIntervalLeft || {};\n  var intervalRight = dirtyIntervalRight || {};\n  var leftStartTime = toDate(intervalLeft.start).getTime();\n  var leftEndTime = toDate(intervalLeft.end).getTime();\n  var rightStartTime = toDate(intervalRight.start).getTime();\n  var rightEndTime = toDate(intervalRight.end).getTime(); // Throw an exception if start date is after end date or if any date is `Invalid Date`\n\n  if (!(leftStartTime <= leftEndTime && rightStartTime <= rightEndTime)) {\n    throw new RangeError('Invalid interval');\n  }\n\n  return leftStartTime < rightEndTime && rightStartTime < leftEndTime;\n}","map":{"version":3,"sources":["C:/Users/pc/Desktop/asira_fe/node_modules/date-fns/esm/areIntervalsOverlapping/index.js"],"names":["toDate","areIntervalsOverlapping","dirtyIntervalLeft","dirtyIntervalRight","arguments","length","TypeError","intervalLeft","intervalRight","leftStartTime","start","getTime","leftEndTime","end","rightStartTime","rightEndTime","RangeError"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,oBAAnB;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0EA,eAAe,SAASC,uBAAT,CAAiCC,iBAAjC,EAAoDC,kBAApD,EAAwE;AACrF,MAAIC,SAAS,CAACC,MAAV,GAAmB,CAAvB,EAA0B;AACxB,UAAM,IAAIC,SAAJ,CAAc,oCAAoCF,SAAS,CAACC,MAA9C,GAAuD,UAArE,CAAN;AACD;;AAED,MAAIE,YAAY,GAAGL,iBAAiB,IAAI,EAAxC;AACA,MAAIM,aAAa,GAAGL,kBAAkB,IAAI,EAA1C;AACA,MAAIM,aAAa,GAAGT,MAAM,CAACO,YAAY,CAACG,KAAd,CAAN,CAA2BC,OAA3B,EAApB;AACA,MAAIC,WAAW,GAAGZ,MAAM,CAACO,YAAY,CAACM,GAAd,CAAN,CAAyBF,OAAzB,EAAlB;AACA,MAAIG,cAAc,GAAGd,MAAM,CAACQ,aAAa,CAACE,KAAf,CAAN,CAA4BC,OAA5B,EAArB;AACA,MAAII,YAAY,GAAGf,MAAM,CAACQ,aAAa,CAACK,GAAf,CAAN,CAA0BF,OAA1B,EAAnB,CAVqF,CAU7B;;AAExD,MAAI,EAAEF,aAAa,IAAIG,WAAjB,IAAgCE,cAAc,IAAIC,YAApD,CAAJ,EAAuE;AACrE,UAAM,IAAIC,UAAJ,CAAe,kBAAf,CAAN;AACD;;AAED,SAAOP,aAAa,GAAGM,YAAhB,IAAgCD,cAAc,GAAGF,WAAxD;AACD","sourcesContent":["import toDate from '../toDate/index.js';\r\n/**\r\n * @name areIntervalsOverlapping\r\n * @category Interval Helpers\r\n * @summary Is the given time interval overlapping with another time interval?\r\n *\r\n * @description\r\n * Is the given time interval overlapping with another time interval? Adjacent intervals do not count as overlapping.\r\n *\r\n * ### v2.0.0 breaking changes:\r\n *\r\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\r\n *\r\n * - The function was renamed from `areRangesOverlapping` to `areIntervalsOverlapping`.\r\n *   This change was made to mirror the use of the word \"interval\" in standard ISO 8601:2004 terminology:\r\n *\r\n *   ```\r\n *   2.1.3\r\n *   time interval\r\n *   part of the time axis limited by two instants\r\n *   ```\r\n *\r\n *   Also, this function now accepts an object with `start` and `end` properties\r\n *   instead of two arguments as an interval.\r\n *   This function now throws `RangeError` if the start of the interval is after its end\r\n *   or if any date in the interval is `Invalid Date`.\r\n *\r\n *   ```javascript\r\n *   // Before v2.0.0\r\n *\r\n *   areRangesOverlapping(\r\n *     new Date(2014, 0, 10), new Date(2014, 0, 20),\r\n *     new Date(2014, 0, 17), new Date(2014, 0, 21)\r\n *   )\r\n *\r\n *   // v2.0.0 onward\r\n *\r\n *   areIntervalsOverlapping(\r\n *     { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\r\n *     { start: new Date(2014, 0, 17), end: new Date(2014, 0, 21) }\r\n *   )\r\n *   ```\r\n *\r\n * @param {Interval} intervalLeft - the first interval to compare. See [Interval]{@link docs/types/Interval}\r\n * @param {Interval} intervalRight - the second interval to compare. See [Interval]{@link docs/types/Interval}\r\n * @returns {Boolean} whether the time intervals are overlapping\r\n * @throws {TypeError} 2 arguments required\r\n * @throws {RangeError} The start of an interval cannot be after its end\r\n * @throws {RangeError} Date in interval cannot be `Invalid Date`\r\n *\r\n * @example\r\n * // For overlapping time intervals:\r\n * areIntervalsOverlapping(\r\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\r\n *   { start: new Date(2014, 0, 17), end: new Date(2014, 0, 21) }\r\n * )\r\n * //=> true\r\n *\r\n * @example\r\n * // For non-overlapping time intervals:\r\n * areIntervalsOverlapping(\r\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\r\n *   { start: new Date(2014, 0, 21), end: new Date(2014, 0, 22) }\r\n * )\r\n * //=> false\r\n *\r\n * @example\r\n * // For adjacent time intervals:\r\n * areIntervalsOverlapping(\r\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\r\n *   { start: new Date(2014, 0, 20), end: new Date(2014, 0, 30) }\r\n * )\r\n * //=> false\r\n */\r\n\r\nexport default function areIntervalsOverlapping(dirtyIntervalLeft, dirtyIntervalRight) {\r\n  if (arguments.length < 2) {\r\n    throw new TypeError('2 arguments required, but only ' + arguments.length + ' present');\r\n  }\r\n\r\n  var intervalLeft = dirtyIntervalLeft || {};\r\n  var intervalRight = dirtyIntervalRight || {};\r\n  var leftStartTime = toDate(intervalLeft.start).getTime();\r\n  var leftEndTime = toDate(intervalLeft.end).getTime();\r\n  var rightStartTime = toDate(intervalRight.start).getTime();\r\n  var rightEndTime = toDate(intervalRight.end).getTime(); // Throw an exception if start date is after end date or if any date is `Invalid Date`\r\n\r\n  if (!(leftStartTime <= leftEndTime && rightStartTime <= rightEndTime)) {\r\n    throw new RangeError('Invalid interval');\r\n  }\r\n\r\n  return leftStartTime < rightEndTime && rightStartTime < leftEndTime;\r\n}"]},"metadata":{},"sourceType":"module"}