{"ast":null,"code":"import toDate from '../toDate/index.js';\n/**\r\n * @name compareDesc\r\n * @category Common Helpers\r\n * @summary Compare the two dates reverse chronologically and return -1, 0 or 1.\r\n *\r\n * @description\r\n * Compare the two dates and return -1 if the first date is after the second,\r\n * 1 if the first date is before the second or 0 if dates are equal.\r\n *\r\n * ### v2.0.0 breaking changes:\r\n *\r\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\r\n *\r\n * @param {Date|Number} dateLeft - the first date to compare\r\n * @param {Date|Number} dateRight - the second date to compare\r\n * @returns {Number} the result of the comparison\r\n * @throws {TypeError} 2 arguments required\r\n *\r\n * @example\r\n * // Compare 11 February 1987 and 10 July 1989 reverse chronologically:\r\n * var result = compareDesc(new Date(1987, 1, 11), new Date(1989, 6, 10))\r\n * //=> 1\r\n *\r\n * @example\r\n * // Sort the array of dates in reverse chronological order:\r\n * var result = [\r\n *   new Date(1995, 6, 2),\r\n *   new Date(1987, 1, 11),\r\n *   new Date(1989, 6, 10)\r\n * ].sort(compareDesc)\r\n * //=> [\r\n * //   Sun Jul 02 1995 00:00:00,\r\n * //   Mon Jul 10 1989 00:00:00,\r\n * //   Wed Feb 11 1987 00:00:00\r\n * // ]\r\n */\n\nexport default function compareDesc(dirtyDateLeft, dirtyDateRight) {\n  if (arguments.length < 2) {\n    throw new TypeError('2 arguments required, but only ' + arguments.length + ' present');\n  }\n\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  var diff = dateLeft.getTime() - dateRight.getTime();\n\n  if (diff > 0) {\n    return -1;\n  } else if (diff < 0) {\n    return 1; // Return 0 if diff is 0; return NaN if diff is NaN\n  } else {\n    return diff;\n  }\n}","map":{"version":3,"sources":["C:/Users/pc/Desktop/asira_fe/node_modules/date-fns/esm/compareDesc/index.js"],"names":["toDate","compareDesc","dirtyDateLeft","dirtyDateRight","arguments","length","TypeError","dateLeft","dateRight","diff","getTime"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,oBAAnB;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqCA,eAAe,SAASC,WAAT,CAAqBC,aAArB,EAAoCC,cAApC,EAAoD;AACjE,MAAIC,SAAS,CAACC,MAAV,GAAmB,CAAvB,EAA0B;AACxB,UAAM,IAAIC,SAAJ,CAAc,oCAAoCF,SAAS,CAACC,MAA9C,GAAuD,UAArE,CAAN;AACD;;AAED,MAAIE,QAAQ,GAAGP,MAAM,CAACE,aAAD,CAArB;AACA,MAAIM,SAAS,GAAGR,MAAM,CAACG,cAAD,CAAtB;AACA,MAAIM,IAAI,GAAGF,QAAQ,CAACG,OAAT,KAAqBF,SAAS,CAACE,OAAV,EAAhC;;AAEA,MAAID,IAAI,GAAG,CAAX,EAAc;AACZ,WAAO,CAAC,CAAR;AACD,GAFD,MAEO,IAAIA,IAAI,GAAG,CAAX,EAAc;AACnB,WAAO,CAAP,CADmB,CACT;AACX,GAFM,MAEA;AACL,WAAOA,IAAP;AACD;AACF","sourcesContent":["import toDate from '../toDate/index.js';\r\n/**\r\n * @name compareDesc\r\n * @category Common Helpers\r\n * @summary Compare the two dates reverse chronologically and return -1, 0 or 1.\r\n *\r\n * @description\r\n * Compare the two dates and return -1 if the first date is after the second,\r\n * 1 if the first date is before the second or 0 if dates are equal.\r\n *\r\n * ### v2.0.0 breaking changes:\r\n *\r\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\r\n *\r\n * @param {Date|Number} dateLeft - the first date to compare\r\n * @param {Date|Number} dateRight - the second date to compare\r\n * @returns {Number} the result of the comparison\r\n * @throws {TypeError} 2 arguments required\r\n *\r\n * @example\r\n * // Compare 11 February 1987 and 10 July 1989 reverse chronologically:\r\n * var result = compareDesc(new Date(1987, 1, 11), new Date(1989, 6, 10))\r\n * //=> 1\r\n *\r\n * @example\r\n * // Sort the array of dates in reverse chronological order:\r\n * var result = [\r\n *   new Date(1995, 6, 2),\r\n *   new Date(1987, 1, 11),\r\n *   new Date(1989, 6, 10)\r\n * ].sort(compareDesc)\r\n * //=> [\r\n * //   Sun Jul 02 1995 00:00:00,\r\n * //   Mon Jul 10 1989 00:00:00,\r\n * //   Wed Feb 11 1987 00:00:00\r\n * // ]\r\n */\r\n\r\nexport default function compareDesc(dirtyDateLeft, dirtyDateRight) {\r\n  if (arguments.length < 2) {\r\n    throw new TypeError('2 arguments required, but only ' + arguments.length + ' present');\r\n  }\r\n\r\n  var dateLeft = toDate(dirtyDateLeft);\r\n  var dateRight = toDate(dirtyDateRight);\r\n  var diff = dateLeft.getTime() - dateRight.getTime();\r\n\r\n  if (diff > 0) {\r\n    return -1;\r\n  } else if (diff < 0) {\r\n    return 1; // Return 0 if diff is 0; return NaN if diff is NaN\r\n  } else {\r\n    return diff;\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}