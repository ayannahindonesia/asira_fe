{"ast":null,"code":"import isWeekend from '../isWeekend/index.js';\nimport toDate from '../toDate/index.js';\nimport toInteger from '../_lib/toInteger/index.js';\n/**\r\n * @name addBusinessDays\r\n * @category Day Helpers\r\n * @summary Add the specified number of business days (mon - fri) to the given date.\r\n *\r\n * @description\r\n * Add the specified number of business days (mon - fri) to the given date, ignoring weekends.\r\n *\r\n * @param {Date|Number} date - the date to be changed\r\n * @param {Number} amount - the amount of business days to be added\r\n * @returns {Date} the new date with the business days added\r\n * @throws {TypeError} 2 arguments required\r\n *\r\n * @example\r\n * // Add 10 business days to 1 September 2014:\r\n * var result = addBusinessDays(new Date(2014, 8, 1), 10)\r\n * //=> Mon Sep 15 2014 00:00:00 (skipped weekend days)\r\n */\n\nexport default function addBusinessDays(dirtyDate, dirtyAmount) {\n  if (arguments.length < 2) {\n    throw new TypeError('2 arguments required, but only ' + arguments.length + ' present');\n  }\n\n  var date = toDate(dirtyDate);\n  var amount = toInteger(dirtyAmount);\n  if (isNaN(amount)) return new Date(NaN);\n  var hours = date.getHours();\n  var sign = amount < 0 ? -1 : 1;\n  date.setDate(date.getDate() + toInteger(amount / 5) * 7);\n  amount %= 5; // to get remaining days not part of a full week\n\n  var shiftSize = Math.abs(amount); // only loops over remaining days or if day is a weekend, ensures a business day is returned\n\n  while (shiftSize > 0 || isWeekend(date)) {\n    if (!isWeekend(date)) shiftSize -= 1;\n    date.setDate(date.getDate() + sign);\n  }\n\n  date.setHours(hours);\n  return date;\n}","map":{"version":3,"sources":["C:/Users/pc/Desktop/asira_fe/node_modules/date-fns/esm/addBusinessDays/index.js"],"names":["isWeekend","toDate","toInteger","addBusinessDays","dirtyDate","dirtyAmount","arguments","length","TypeError","date","amount","isNaN","Date","NaN","hours","getHours","sign","setDate","getDate","shiftSize","Math","abs","setHours"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,uBAAtB;AACA,OAAOC,MAAP,MAAmB,oBAAnB;AACA,OAAOC,SAAP,MAAsB,4BAAtB;AACA;;;;;;;;;;;;;;;;;;;AAmBA,eAAe,SAASC,eAAT,CAAyBC,SAAzB,EAAoCC,WAApC,EAAiD;AAC9D,MAAIC,SAAS,CAACC,MAAV,GAAmB,CAAvB,EAA0B;AACxB,UAAM,IAAIC,SAAJ,CAAc,oCAAoCF,SAAS,CAACC,MAA9C,GAAuD,UAArE,CAAN;AACD;;AAED,MAAIE,IAAI,GAAGR,MAAM,CAACG,SAAD,CAAjB;AACA,MAAIM,MAAM,GAAGR,SAAS,CAACG,WAAD,CAAtB;AACA,MAAIM,KAAK,CAACD,MAAD,CAAT,EAAmB,OAAO,IAAIE,IAAJ,CAASC,GAAT,CAAP;AACnB,MAAIC,KAAK,GAAGL,IAAI,CAACM,QAAL,EAAZ;AACA,MAAIC,IAAI,GAAGN,MAAM,GAAG,CAAT,GAAa,CAAC,CAAd,GAAkB,CAA7B;AACAD,EAAAA,IAAI,CAACQ,OAAL,CAAaR,IAAI,CAACS,OAAL,KAAiBhB,SAAS,CAACQ,MAAM,GAAG,CAAV,CAAT,GAAwB,CAAtD;AACAA,EAAAA,MAAM,IAAI,CAAV,CAX8D,CAWjD;;AAEb,MAAIS,SAAS,GAAGC,IAAI,CAACC,GAAL,CAASX,MAAT,CAAhB,CAb8D,CAa5B;;AAElC,SAAOS,SAAS,GAAG,CAAZ,IAAiBnB,SAAS,CAACS,IAAD,CAAjC,EAAyC;AACvC,QAAI,CAACT,SAAS,CAACS,IAAD,CAAd,EAAsBU,SAAS,IAAI,CAAb;AACtBV,IAAAA,IAAI,CAACQ,OAAL,CAAaR,IAAI,CAACS,OAAL,KAAiBF,IAA9B;AACD;;AAEDP,EAAAA,IAAI,CAACa,QAAL,CAAcR,KAAd;AACA,SAAOL,IAAP;AACD","sourcesContent":["import isWeekend from '../isWeekend/index.js';\r\nimport toDate from '../toDate/index.js';\r\nimport toInteger from '../_lib/toInteger/index.js';\r\n/**\r\n * @name addBusinessDays\r\n * @category Day Helpers\r\n * @summary Add the specified number of business days (mon - fri) to the given date.\r\n *\r\n * @description\r\n * Add the specified number of business days (mon - fri) to the given date, ignoring weekends.\r\n *\r\n * @param {Date|Number} date - the date to be changed\r\n * @param {Number} amount - the amount of business days to be added\r\n * @returns {Date} the new date with the business days added\r\n * @throws {TypeError} 2 arguments required\r\n *\r\n * @example\r\n * // Add 10 business days to 1 September 2014:\r\n * var result = addBusinessDays(new Date(2014, 8, 1), 10)\r\n * //=> Mon Sep 15 2014 00:00:00 (skipped weekend days)\r\n */\r\n\r\nexport default function addBusinessDays(dirtyDate, dirtyAmount) {\r\n  if (arguments.length < 2) {\r\n    throw new TypeError('2 arguments required, but only ' + arguments.length + ' present');\r\n  }\r\n\r\n  var date = toDate(dirtyDate);\r\n  var amount = toInteger(dirtyAmount);\r\n  if (isNaN(amount)) return new Date(NaN);\r\n  var hours = date.getHours();\r\n  var sign = amount < 0 ? -1 : 1;\r\n  date.setDate(date.getDate() + toInteger(amount / 5) * 7);\r\n  amount %= 5; // to get remaining days not part of a full week\r\n\r\n  var shiftSize = Math.abs(amount); // only loops over remaining days or if day is a weekend, ensures a business day is returned\r\n\r\n  while (shiftSize > 0 || isWeekend(date)) {\r\n    if (!isWeekend(date)) shiftSize -= 1;\r\n    date.setDate(date.getDate() + sign);\r\n  }\r\n\r\n  date.setHours(hours);\r\n  return date;\r\n}"]},"metadata":{},"sourceType":"module"}