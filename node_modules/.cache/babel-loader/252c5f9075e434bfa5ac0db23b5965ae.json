{"ast":null,"code":"import toDate from '../toDate/index.js';\n/**\r\n * @name isWeekend\r\n * @category Weekday Helpers\r\n * @summary Does the given date fall on a weekend?\r\n *\r\n * @description\r\n * Does the given date fall on a weekend?\r\n *\r\n * ### v2.0.0 breaking changes:\r\n *\r\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\r\n *\r\n * @param {Date|Number} date - the date to check\r\n * @returns {Boolean} the date falls on a weekend\r\n * @throws {TypeError} 1 argument required\r\n *\r\n * @example\r\n * // Does 5 October 2014 fall on a weekend?\r\n * var result = isWeekend(new Date(2014, 9, 5))\r\n * //=> true\r\n */\n\nexport default function isWeekend(dirtyDate) {\n  if (arguments.length < 1) {\n    throw new TypeError('1 argument required, but only ' + arguments.length + ' present');\n  }\n\n  var date = toDate(dirtyDate);\n  var day = date.getDay();\n  return day === 0 || day === 6;\n}","map":{"version":3,"sources":["C:/Users/pc/Desktop/asira_fe/node_modules/date-fns/esm/isWeekend/index.js"],"names":["toDate","isWeekend","dirtyDate","arguments","length","TypeError","date","day","getDay"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,oBAAnB;AACA;;;;;;;;;;;;;;;;;;;;;;AAsBA,eAAe,SAASC,SAAT,CAAmBC,SAAnB,EAA8B;AAC3C,MAAIC,SAAS,CAACC,MAAV,GAAmB,CAAvB,EAA0B;AACxB,UAAM,IAAIC,SAAJ,CAAc,mCAAmCF,SAAS,CAACC,MAA7C,GAAsD,UAApE,CAAN;AACD;;AAED,MAAIE,IAAI,GAAGN,MAAM,CAACE,SAAD,CAAjB;AACA,MAAIK,GAAG,GAAGD,IAAI,CAACE,MAAL,EAAV;AACA,SAAOD,GAAG,KAAK,CAAR,IAAaA,GAAG,KAAK,CAA5B;AACD","sourcesContent":["import toDate from '../toDate/index.js';\r\n/**\r\n * @name isWeekend\r\n * @category Weekday Helpers\r\n * @summary Does the given date fall on a weekend?\r\n *\r\n * @description\r\n * Does the given date fall on a weekend?\r\n *\r\n * ### v2.0.0 breaking changes:\r\n *\r\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\r\n *\r\n * @param {Date|Number} date - the date to check\r\n * @returns {Boolean} the date falls on a weekend\r\n * @throws {TypeError} 1 argument required\r\n *\r\n * @example\r\n * // Does 5 October 2014 fall on a weekend?\r\n * var result = isWeekend(new Date(2014, 9, 5))\r\n * //=> true\r\n */\r\n\r\nexport default function isWeekend(dirtyDate) {\r\n  if (arguments.length < 1) {\r\n    throw new TypeError('1 argument required, but only ' + arguments.length + ' present');\r\n  }\r\n\r\n  var date = toDate(dirtyDate);\r\n  var day = date.getDay();\r\n  return day === 0 || day === 6;\r\n}"]},"metadata":{},"sourceType":"module"}