{"ast":null,"code":"import startOfWeek from '../startOfWeek/index.js';\nimport getTimezoneOffsetInMilliseconds from '../_lib/getTimezoneOffsetInMilliseconds/index.js';\nvar MILLISECONDS_IN_WEEK = 604800000;\n/**\r\n * @name differenceInCalendarWeeks\r\n * @category Week Helpers\r\n * @summary Get the number of calendar weeks between the given dates.\r\n *\r\n * @description\r\n * Get the number of calendar weeks between the given dates.\r\n *\r\n * ### v2.0.0 breaking changes:\r\n *\r\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\r\n *\r\n * @param {Date|Number} dateLeft - the later date\r\n * @param {Date|Number} dateRight - the earlier date\r\n * @param {Object} [options] - an object with options.\r\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\r\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\r\n * @returns {Number} the number of calendar weeks\r\n * @throws {TypeError} 2 arguments required\r\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\r\n *\r\n * @example\r\n * // How many calendar weeks are between 5 July 2014 and 20 July 2014?\r\n * var result = differenceInCalendarWeeks(\r\n *   new Date(2014, 6, 20),\r\n *   new Date(2014, 6, 5)\r\n * )\r\n * //=> 3\r\n *\r\n * @example\r\n * // If the week starts on Monday,\r\n * // how many calendar weeks are between 5 July 2014 and 20 July 2014?\r\n * var result = differenceInCalendarWeeks(\r\n *   new Date(2014, 6, 20),\r\n *   new Date(2014, 6, 5),\r\n *   { weekStartsOn: 1 }\r\n * )\r\n * //=> 2\r\n */\n\nexport default function differenceInCalendarWeeks(dirtyDateLeft, dirtyDateRight, dirtyOptions) {\n  if (arguments.length < 2) {\n    throw new TypeError('2 arguments required, but only ' + arguments.length + ' present');\n  }\n\n  var startOfWeekLeft = startOfWeek(dirtyDateLeft, dirtyOptions);\n  var startOfWeekRight = startOfWeek(dirtyDateRight, dirtyOptions);\n  var timestampLeft = startOfWeekLeft.getTime() - getTimezoneOffsetInMilliseconds(startOfWeekLeft);\n  var timestampRight = startOfWeekRight.getTime() - getTimezoneOffsetInMilliseconds(startOfWeekRight); // Round the number of days to the nearest integer\n  // because the number of milliseconds in a week is not constant\n  // (e.g. it's different in the week of the daylight saving time clock shift)\n\n  return Math.round((timestampLeft - timestampRight) / MILLISECONDS_IN_WEEK);\n}","map":{"version":3,"sources":["C:/Users/pc/Desktop/asira_fe/node_modules/date-fns/esm/differenceInCalendarWeeks/index.js"],"names":["startOfWeek","getTimezoneOffsetInMilliseconds","MILLISECONDS_IN_WEEK","differenceInCalendarWeeks","dirtyDateLeft","dirtyDateRight","dirtyOptions","arguments","length","TypeError","startOfWeekLeft","startOfWeekRight","timestampLeft","getTime","timestampRight","Math","round"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,yBAAxB;AACA,OAAOC,+BAAP,MAA4C,kDAA5C;AACA,IAAIC,oBAAoB,GAAG,SAA3B;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwCA,eAAe,SAASC,yBAAT,CAAmCC,aAAnC,EAAkDC,cAAlD,EAAkEC,YAAlE,EAAgF;AAC7F,MAAIC,SAAS,CAACC,MAAV,GAAmB,CAAvB,EAA0B;AACxB,UAAM,IAAIC,SAAJ,CAAc,oCAAoCF,SAAS,CAACC,MAA9C,GAAuD,UAArE,CAAN;AACD;;AAED,MAAIE,eAAe,GAAGV,WAAW,CAACI,aAAD,EAAgBE,YAAhB,CAAjC;AACA,MAAIK,gBAAgB,GAAGX,WAAW,CAACK,cAAD,EAAiBC,YAAjB,CAAlC;AACA,MAAIM,aAAa,GAAGF,eAAe,CAACG,OAAhB,KAA4BZ,+BAA+B,CAACS,eAAD,CAA/E;AACA,MAAII,cAAc,GAAGH,gBAAgB,CAACE,OAAjB,KAA6BZ,+BAA+B,CAACU,gBAAD,CAAjF,CAR6F,CAQQ;AACrG;AACA;;AAEA,SAAOI,IAAI,CAACC,KAAL,CAAW,CAACJ,aAAa,GAAGE,cAAjB,IAAmCZ,oBAA9C,CAAP;AACD","sourcesContent":["import startOfWeek from '../startOfWeek/index.js';\r\nimport getTimezoneOffsetInMilliseconds from '../_lib/getTimezoneOffsetInMilliseconds/index.js';\r\nvar MILLISECONDS_IN_WEEK = 604800000;\r\n/**\r\n * @name differenceInCalendarWeeks\r\n * @category Week Helpers\r\n * @summary Get the number of calendar weeks between the given dates.\r\n *\r\n * @description\r\n * Get the number of calendar weeks between the given dates.\r\n *\r\n * ### v2.0.0 breaking changes:\r\n *\r\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\r\n *\r\n * @param {Date|Number} dateLeft - the later date\r\n * @param {Date|Number} dateRight - the earlier date\r\n * @param {Object} [options] - an object with options.\r\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\r\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\r\n * @returns {Number} the number of calendar weeks\r\n * @throws {TypeError} 2 arguments required\r\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\r\n *\r\n * @example\r\n * // How many calendar weeks are between 5 July 2014 and 20 July 2014?\r\n * var result = differenceInCalendarWeeks(\r\n *   new Date(2014, 6, 20),\r\n *   new Date(2014, 6, 5)\r\n * )\r\n * //=> 3\r\n *\r\n * @example\r\n * // If the week starts on Monday,\r\n * // how many calendar weeks are between 5 July 2014 and 20 July 2014?\r\n * var result = differenceInCalendarWeeks(\r\n *   new Date(2014, 6, 20),\r\n *   new Date(2014, 6, 5),\r\n *   { weekStartsOn: 1 }\r\n * )\r\n * //=> 2\r\n */\r\n\r\nexport default function differenceInCalendarWeeks(dirtyDateLeft, dirtyDateRight, dirtyOptions) {\r\n  if (arguments.length < 2) {\r\n    throw new TypeError('2 arguments required, but only ' + arguments.length + ' present');\r\n  }\r\n\r\n  var startOfWeekLeft = startOfWeek(dirtyDateLeft, dirtyOptions);\r\n  var startOfWeekRight = startOfWeek(dirtyDateRight, dirtyOptions);\r\n  var timestampLeft = startOfWeekLeft.getTime() - getTimezoneOffsetInMilliseconds(startOfWeekLeft);\r\n  var timestampRight = startOfWeekRight.getTime() - getTimezoneOffsetInMilliseconds(startOfWeekRight); // Round the number of days to the nearest integer\r\n  // because the number of milliseconds in a week is not constant\r\n  // (e.g. it's different in the week of the daylight saving time clock shift)\r\n\r\n  return Math.round((timestampLeft - timestampRight) / MILLISECONDS_IN_WEEK);\r\n}"]},"metadata":{},"sourceType":"module"}